@using Domain.Entities
@using Domain.Enums
@using WebUI.ViewModels.Expense

@model ExpenseViewModel
@{
    ViewData["Title"] = "Despesas";
    int currentYear = ViewBag.CurrentYear ?? DateTime.Now.Year;
    int currentMonth = ViewBag.CurrentMonth ?? DateTime.Now.Month;
}

<div class="container-fluid">

    <div class="d-flex justify-content-between align-items-center mb-4 bg-white rounded-3 px-4 py-3 shadow-sm">
        <h1 class="mb-0">Despesas</h1> @* Título "Contas" *@
        <div class="d-flex align-items-center">
            @* Dropdown do mês/ano *@
            <div class="position-relative me-3">
                <button class="btn btn-month-year dropdown-toggle" type="button" id="monthDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                    @Thread.CurrentThread.CurrentCulture.DateTimeFormat.GetMonthName(currentMonth)
                </button>
                <div class="dropdown-menu p-3" aria-labelledby="monthDropdown" style="min-width: 250px;">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <a href="#" class="btn btn-link year-nav" data-year-change="-1"><i class="bi bi-chevron-left"></i></a>
                        <h5 id="selectedYear" class="mb-0">@currentYear</h5>
                        <a href="#" class="btn btn-link year-nav" data-year-change="1"><i class="bi bi-chevron-right"></i></a>
                    </div>
                    <div class="row row-cols-3 g-2 text-center" id="monthGrid">
                        @for (int m = 1; m <= 12; m++)
                        {
                            string monthName = new DateTime(currentYear, m, 1).ToString("MMM").ToUpper();
                            string activeClass = (m == currentMonth) ? "active" : ""; // Usar 'active' para o CSS customizado
                            <div class="col">
                                <a href="#" class="btn btn-sm w-100 month-link @activeClass" data-month="@m">@monthName</a>
                            </div>
                        }
                    </div>
                    <div class="d-flex justify-content-between mt-3">
                        <button class="btn btn-sm btn-secondary-custom" id="cancelBtn">CANCELAR</button>
                        <a href="#" class="btn btn-sm btn-primary-custom" id="currentMonthBtn">MÊS ATUAL</a>
                    </div>
                </div>
            </div>

            <a href="@Url.Action("Create", "Expense")" class="btn btn-link header-action-icon me-2" title="Adicionar Nova Conta">
                <i class="bi bi-plus-circle"></i>
            </a>
        </div>
    </div>

    <div class="card border shadow-sm rounded">
        <div class="card-body p-4">

            @* Seção de Pesquisa e Botões (Adaptado para o topo da tabela)*@
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h6 class="mb-0">Todos as Despesas ( @Model.TotalItems )</h6>
                <div class="d-flex align-items-center">
                    <div class="input-group me-2" style="width: 250px;">
                        <input type="text" class="form-control border-secondary" placeholder="Pesquisar" value="@Model.SearchTerm" id="searchTerm">
                        <span class="input-group-text border-secondary"><i class="bi bi-search"></i></span>
                    </div>

                    <button class="btn btn-outline-secondary me-2 px-4 py-2 rounded" onclick="applyFilter()"> 
                        <i class="bi bi-funnel"></i> Filtros
                    </button>

                    <a asp-action="Create" class="btn btn-outline-primary px-4 py-2 rounded">
                        <i class="bi bi-plus-lg"></i> Adicionar Despesa
                    </a>

                    <button id="deleteSelectedBtn" class="btn btn-outline-danger ms-2 px-4 py-2 rounded" style="display: none;" onclick="deleteSelected()">
                        <i class="bi bi-trash"></i> Excluir Selecionados
                    </button>
                </div>
            </div>

            <table class="table table-border table-responsive align-middle mb-0 text-light" id="table-album">
                <thead style="background-color: #343a40; border-radius: 10px 10px 0 0;">
                    <tr>
                        <th scope="col" style="width: 2%; border-top-left-radius: 10px;">
                            <input type="checkbox" id="selectAll" class="form-check-input border-secondary">
                        </th>
                        <th scope="col" style="width: 8%;">Status</th>
                        <th scope="col" style="width: 10%;">Data</th>
                        <th scope="col" class="d-none d-md-table-cell">Descrição</th>
                        <th scope="col" class="d-none d-md-table-cell">Categoria</th>
                        <th scope="col" class="d-none d-md-table-cell">Conta</th>
                        <th scope="col" class="d-none d-md-table-cell">Valor</th>
                        <th scope="col" class="rounded-top-end" style="width: 10%;">Ações</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model.Expenses.Any())
                    {
                        @foreach (var expense in Model.Expenses)
                        {
                            <tr class="align-middle">
                                <td>
                                    <input type="checkbox" class="selectActivity form-check-input border-secondary" 
                                        name="ids" value="@expense.Id">
                                </td>
                                <td>
                                    @if (expense.IsPaid)
                                        { <i class="bi bi-check-circle-fill text-success"></i> }
                                    else
                                        { <i class="bi bi-exclamation-circle-fill text-danger"></i> }
                                </td>
                                <td class="d-md-table-cell">@expense.Date.ToString("dd/MM/yyyy")</td>
                                <td class="d-md-table-cell">@expense.Description</td>
                                <td class="d-md-table-cell">@expense.Category</td>
                                <td class="d-md-table-cell">@expense.BankAccount!.Name</td>
                                <td class="text-danger d-md-table-cell">R$ @expense.Amount.ToString("N2")</td>
                                <td>
                                    <div class="btn-group-sm" role="group">
                                        <a role="button" class="btn btn-primary" aria-label="Editar"
                                            asp-route-id="@expense.Id" asp-action="Edit">
                                            <i class="bi bi-pencil"></i></a>
                                        <a role="button" class="btn btn-danger" aria-label="Deletar"
                                            asp-route-id="@expense.Id" asp-action="Delete">
                                            <i class="bi bi-trash3"></i></a>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <td colspan="6">Nenhuma Despesa Cadastrada!</td>
                    }
                </tbody>
            </table>

            <div class="d-flex justify-content-between align-items-center mt-3">

                <div class="d-flex align-items-center">
                    <span class="me-2">Linhas por página:</span>
                    <select class="form-select form-select-sm border-secondary w-auto"
                        onchange="changePageSize(this.value)">
                        <option value="10" selected=@(Model.PageSize == 10 ? true : false)>10</option>
                        <option value="25" selected=@(Model.PageSize == 25 ? true : false)>25</option>
                        <option value="50" selected=@(Model.PageSize == 50 ? true : false)>50</option>
                        <option value="100" selected=@(Model.PageSize == 100 ? true : false)>100</option>
                    </select>
                </div>

                <div>
                    <span class="text-muted">
                        Mostrando @((Model.PageNumber - 1) * Model.PageSize + 1)-@(Model.PageNumber * Model.PageSize) de @Model.TotalItems
                    </span>
                </div>

                @if (Model.TotalItems > 10)
                {
                    <nav aria-label="Navegação de página">
                        <ul class="pagination pagination-sm mb-0"> @* pagination-sm para botões menores *@

                            <li class="page-item @(Model.PageNumber == 1 ? "disabled" : "")">
                                <a class="page-link border-secondary" aria-label="Anterior"
                                    href="@Url.Action("Index", new {
                                            pageNumber = Model.PageNumber - 1,
                                            pageSize = Model.PageSize,
                                            searchTerm = Model.SearchTerm })">
                                    <span aria-hidden="true">&laquo;</span>
                                </a>
                            </li>

                            @for (var i = 1; i <= Model.TotalPages; i++)
                            {
                                <li class="page-item @(i == Model.PageNumber ? "active" : "")">
                                    <a class="page-link @(i == Model.PageNumber ? "bg-primary border-primary" : "border-secondary")"
                                        href="@Url.Action("Index", new {
                                                pageNumber = i,
                                                pageSize = Model.PageSize,
                                                searchTerm = Model.SearchTerm })">@i</a>
                                </li>
                            }

                            <li class="page-item @(Model.PageNumber == Model.TotalPages ? "disabled" : "")">
                                <a class="page-link border-secondary" aria-label="Próximo"
                                    href="@Url.Action("Index", new {
                                            pageNumber = Model.PageNumber + 1,
                                            pageSize = Model.PageSize,
                                            searchTerm = Model.SearchTerm })">
                                    <span aria-hidden="true">&raquo;</span>
                                </a>
                            </li>
                        </ul>
                    </nav>
                }
            </div>
        </div>
    </div>
</div>

@* JavaScript para os filtros e paginação *@
<script>
    function applyFilter() {
        var searchTerm = document.getElementById('searchTerm').value;
        window.location.href = '@Url.Action("Index", "Expense")?searchTerm=' + searchTerm;
    }

    function changePageSize(pageSize) {
        var searchTerm = document.getElementById('searchTerm').value;
        window.location.href = '@Url.Action("Index", "Expense")?pageSize=' + pageSize + '&searchTerm=' + searchTerm;
    }

    document.addEventListener('DOMContentLoaded', function () {
        // Lógica para o botão "Excluir Selecionados" e checkboxes
        const selectAllCheckbox = document.getElementById('selectAll');
        const selectActivityCheckboxes = document.querySelectorAll('.selectActivity');
        const deleteSelectedBtn = document.getElementById('deleteSelectedBtn');

        function updateDeleteButtonVisibility() {
            const anyChecked = Array.from(selectActivityCheckboxes).some(cb => cb.checked);
            deleteSelectedBtn.style.display = anyChecked ? 'inline-block' : 'none';
        }

        selectAllCheckbox.addEventListener('change', function () {
            selectActivityCheckboxes.forEach(cb => {
                cb.checked = this.checked;
            });
            updateDeleteButtonVisibility();
        });

        selectActivityCheckboxes.forEach(cb => {
            cb.addEventListener('change', updateDeleteButtonVisibility);
        });

        // Inicializa a visibilidade do botão de exclusão ao carregar a página
        updateDeleteButtonVisibility();

        // Lógica para fechar alertas (se você quiser reintroduzir os alertas)
        document.querySelectorAll('.close-alert').forEach(button => {
            button.addEventListener('click', function () {
                this.closest('.alert').remove();
            });
        });
    });

    function deleteSelected() {
        const selectedIds = Array.from(document.querySelectorAll('.selectActivity:checked')).map(cb => cb.value);
        if (selectedIds.length > 0) {
            if (confirm('Tem certeza que deseja excluir as despesas selecionadas?')) { // Use um modal Bootstrap real em produção
                alert('Itens a serem excluídos: ' + selectedIds.join(', ')); // Apenas para demonstração
                window.location.reload(); // Recarrega a página após a "exclusão"
            }
        } else {
            alert('Nenhuma despesa selecionada para exclusão.');
        }
    }
</script>
